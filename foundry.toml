# Full reference https://github.com/foundry-rs/foundry/tree/master/config

# === Default Profile =========================================================

[profile.default]

solc = "0.8.16"
optimizer = true
optimizer_runs = 10_000
evm_version = "shanghai"
fuzz = {runs = 256}
fs_permissions = [{ access = "read", path = "./"}]

src="src"
libs = ["lib"]
out = "out"
test = "test"

gas_reports = ["*"]

auto_detect_solc = false
bytecode_hash = "none"

remappings = [
  "@prb/test/=lib/prb-test/src/",
  "forge-std/=lib/forge-std/src/",
  "src/=src/",
  "solmate/=lib/solmate/",
  "@rari-capital/solmate/=lib/solmate/",
  "@scroll-tech/contracts/=node_modules/@scroll-tech/contracts/",
  "@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/",
  "@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
  "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
  "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
  "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
  "fx-portal/contracts/=lib/contracts/contracts/",
]

# Make formatting consistent.
[profile.default.fmt]
line_length = 100               # The maximum length of lines.
tab_width = 4                   # Indent by two spaces for each level.
bracket_spacing = false         # Don't put spaces between brackets and content.
int_types = "long"              # Specify full integer type names.

# We want to optimise via the new optimiser backend for better results.
via_ir = true

# We can have quite some control over the optimiser when using the new IR one.
[profile.default.optimizer_details]
peephole = true           # Enables the peephole optimisation.
inliner = true            # Enables the inliner.
jumpdest_remover = true   # Enables the elimination of jump destinations.
order_literals = true     # Allows re-ordering literals in commutative ops.
deduplicate = true        # Removes duplicate code blocks.
cse = true                # Enables common subexpression elimination. Useful.
constant_optimizer = true # Computes some constant expressions at compile time.
yul = true                # Enables the new ABI optimiser.

[profile.default.optimizer_details.yul_details]
stack_allocation = true   # Improves allocation of stack slots for variables.

# === Debug Profile ===========================================================

[profile.debug]
# Make things chattier when debugging in case of test failures, giving us more
# information with which to debug the issue. At this level, stack traces and
# setup traces for failing tests are displayed.
verbosity = 3

[profile.ci]
fuzz = {runs = 10_000}
verbosity = 4


# === Test All Profile ========================================================

[profile.bench]
# We make the optimiser run a lot more for production, hoping to reduce our gas
# costs.
optimizer_runs = 20000

# Make things chattier when debugging in case of test failures, giving us more
# information with which to debug the issue. At this level, stack traces for
# failing tests are displayed.
verbosity = 3

# We can specify the contracts to track gas data for by tracing.
gas_reports = [
  "WorldIDIdentityManager",
  "MockWorldIDIdentityManager",
  "Verifier",
]

# === Production Profile ======================================================

[profile.production]
# We make the optimiser run a lot more for production, hoping to reduce our gas
# costs.
fs_permissions = [{ access = "read", path = "./"}]
optimizer_runs = 20000

[rpc_endpoints]
scrollSepolia = "${SCROLL_TESTNET_RPC_URL}"

[etherscan]
scrollSepolia = { key = "${SCROLL_ETHERSCAN_API_KEY}" }